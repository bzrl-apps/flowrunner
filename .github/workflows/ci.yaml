name: CI

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*.*"

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  PLEZI_PAT: ${{secrets.PLEZI_PAT}}
  CI_USER_NAME: ci
  CI_USER_EMAIL: ci@uthng.me
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  SCCACHE_VER: v0.2.15
  SCCACHE_ERROR_LOG: /tmp/sccache_log
  SCCACHE_BUCKET: bzrl-rust-sccache
  SCCACHE_ENDPOINT: s3.fr-par.scw.cloud
  SCCACHE_S3_KEY_PREFIX: flowrunner
  SCCACHE_S3_USE_SSL: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  RUSTC_WRAPPER: /usr/local/bin/sccache

jobs:
  check_test:
    name: Check & test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip-check]') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: wagoid/commitlint-github-action@v2

      - name: Cache cargo
        uses: actions/cache@v1
        id: flowrunner-cargo
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy

      - name: Install dependencies
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/${SCCACHE_VER}/sccache-${SCCACHE_VER}-x86_64-unknown-linux-musl.tar.gz | tar xzf -
          sudo mv sccache-${SCCACHE_VER}-x86_64-unknown-linux-musl/sccache /usr/local/bin/
          chmod +x /usr/local/bin/sccache

      - name: Check linters
        run: |
          #make clippy
          cargo clippy --workspace --target x86_64-unknown-linux-gnu

      #- name: Launch unit tests
        #run: make tests

      #- name: Launch integration tests
        #run: make test-integration
        #

  build:
    #needs: [check_test]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip-build]') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache cargo
        uses: actions/cache@v1
        id: flowrunner-cargo
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy

      - name: Install dependencies
        run: |
          curl -L https://github.com/mozilla/sccache/releases/download/${SCCACHE_VER}/sccache-${SCCACHE_VER}-x86_64-unknown-linux-musl.tar.gz | tar xzf -
          sudo mv sccache-${SCCACHE_VER}-x86_64-unknown-linux-musl/sccache /usr/local/bin/
          chmod +x /usr/local/bin/sccache
          make deps

      - name: debug env
        run: env

      - name: Build multiple platforms
        run: |
          env
          make build-linux

      - name: Archive generated binaries
        uses: actions/upload-artifact@v2
        with:
          name: flowrunner-target
          path: |
            target/x86_64-unknown-linux-gnu/release/flowrunner
            target/x86_64-unknown-linux-gnu/release/*.so
            target/aarch64-unknown-linux-gnu/release/flowrunner
            target/aarch64-unknown-linux-gnu/release/*.so
          retention-days: 7

  prerelease:
    needs: [build]
    name: Pre-release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/next' && !contains(github.event.head_commit.message, '[skip-prerelease]') }}
    steps:
      - name: Display variables & commit message
        run: |
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download generated binaries
        uses: actions/download-artifact@v2
        with:
          name: flowrunner-target
          path: target

      - name: View current directory
        run: ls -lR

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Git Setup
        run: |
          git config --global user.email $CI_USER_EMAIL
          git config --global user.name $CI_USER_NAME
          git config --global pull.ff only
          git checkout -b ci_processing

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Next release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: npx -p conventional-changelog-conventionalcommits -p @semantic-release/changelog -p @semantic-release/git -p @semantic-release/exec -p @semantic-release/github -p semantic-release semantic-release

  release:
    needs: [build]
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, '[skip-release]') }}
    steps:
      - name: Display variables & commit message
        run: |
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download generated binaries
        uses: actions/download-artifact@v2
        with:
          name: flowrunner-target
          path: target

      - name: View current directory
        run: |
          ls -la
          ls -lR target/x86_64-unknown-linux-gnu
          ls -lR target/aarch64-unknown-linux-gnu

      - name: Fetch tags
        run: |
          git fetch --tags

      - name: Git Setup
        run: |
          git config --global user.email $CI_USER_EMAIL
          git config --global user.name $CI_USER_NAME
          git config --global pull.ff only
          git checkout -b ci_processing
          #
      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Master release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: npx -p conventional-changelog-conventionalcommits -p @semantic-release/changelog -p @semantic-release/git -p @semantic-release/exec -p @semantic-release/github -p semantic-release semantic-release

      #- name: Update back next
        #run: |
          #git checkout next
          #git pull origin next
          #git merge --no-ff master next -X theirs -m "chore(merge): auto merge master to next"
          #git push origin next
